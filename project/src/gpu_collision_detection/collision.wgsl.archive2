const ARRAY_SIZE: u32 = 5;
const MAX_ARRAY_SIZE: u32 = 5;
const WORKGROUP_SIZE_X: u32 = 64;
const WORKGROUP_SIZE_Y: u32 = 1;
const WORKGROUP_SIZE_Z: u32 = 1;
//! Do not alter the lines above! They are controlled automatically.

struct Positions {
    positions: array<array<f32,2>,ARRAY_SIZE>
}
struct Radii {
    radii: array<f32,ARRAY_SIZE>
}
struct CollisionResult {
    max_array_size: u32,
    array_size: u32,
    global_id_x: u32,
    global_id_y: u32,
    global_id_z: u32,
    workgroup_id_x: u32,
    workgroup_size_x: u32,
    workgroup_id_y: u32,
    workgroup_size_y: u32,
    workgroup_id_z: u32,
    workgroup_size_z: u32,
}
struct CollisionResults {
    results: array<CollisionResult, MAX_ARRAY_SIZE>,
}
struct Counter {
    count: atomic<u32>,
}

@group(0) @binding(0) var<storage, read> positions: Positions;
@group(0) @binding(1) var<storage, read> radii: Radii;
@group(0) @binding(2) var<storage, read_write> results: CollisionResults;
@group(0) @binding(3) var<storage, read_write> counter: Counter;

// Optimized distance calculation
fn calculate_distance_squared(p1: array<f32,2>, p2: array<f32,2>) -> f32 {
    let dx = p1[0] - p2[0];
    let dy = p1[1] - p2[1];
    return dx * dx + dy * dy;
}

@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, WORKGROUP_SIZE_Z)
fn main(@builtin(global_invocation_id) global_id: vec3<u32>,
@builtin(workgroup_id) workgroup_id: vec3<u32>
) {
    let index = atomicAdd(&counter.count, 1u);
    if index < MAX_ARRAY_SIZE {
        results.results[index].max_array_size = MAX_ARRAY_SIZE;
        results.results[index].array_size = ARRAY_SIZE;
        results.results[index].global_id_x = global_id.x;
        results.results[index].global_id_y = global_id.y;
        results.results[index].global_id_z = global_id.z;
        results.results[index].workgroup_id_x = workgroup_id.x;
        results.results[index].workgroup_size_x = WORKGROUP_SIZE_X;
        results.results[index].workgroup_id_y = workgroup_id.y;
        results.results[index].workgroup_size_y = WORKGROUP_SIZE_Y;
        results.results[index].workgroup_id_z = workgroup_id.z;
        results.results[index].workgroup_size_z = WORKGROUP_SIZE_Z;

    }
}